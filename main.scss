// Import Gloabal Rules
@use "sass/layout/global-rules";
// Import Contacts Rules
@use "sass/layout/pages/contacts";
// Import Color Variables
@use "sass/layout/variables/colors";
/* Another Method :
// @use 'sass/layout/variables/colors' as * ; -> To use It's Variables .. Just mention the variable ..
.container{
    color: $red-100;
   background-color:$red-50;
}
*/
@use "sass/helpers/mixins" as *;

$main_color: green;
$dark_theme: darkgreen;
$maxWidthForMobile: "800px";

.header {
  color: $dark_theme;
  $dark_theme: darkblue !global;
  background-color: $main_color;
}
.footer {
  $main_color: black;
  color: $dark_theme;
  background-color: $main_color;
}
.container {
  color: colors.$red-100;
  background-color: colors.$red-50;
}

@media (max-width: $maxWidthForMobile) {
  .header {
    padding: 25px;
  }
}

// Nesting And Parent Element
.parent {
  font-style: oblique;
  > {
    .child-1 {
      font-size: large;
    }
    .child-2 {
      font-size: larger;
    }
  }
  .child {
    font-weight: 200;
    .grandChild {
      font-weight: 300;
    }
  }
  .child-2 {
    font-size: small;
  }
  + {
    p {
      text-align: center;
    }
    h3 {
      color: rebeccapurple;
    }
  }
}

.parent > .child {
  font-weight: 400;
}

.parent-2,
.parent-3 {
  font-display: initial;
  [dir="rtl"] & {
    padding: 20px;
  }
  [data-color="red"] .child {
    color: red;
  }
  .child {
    font-variant: small-caps;
    > .grandChild {
      font-family: "Courier New", Courier, monospace;
    }
  }
  ~ h5 {
    color: green;
  }
}

.box {
  .title {
    font-size: large;
  }
  .description {
    font-size: medium;
  }
  &.red {
    color: red;
  }
  &:hover {
    color: green;
  }
  :not(&):not(.title) {
    font-weight: lighter;
  }
}

// Property Declarations And Placeholder

.box {
  font-size: 20px;
  font: {
    size: 15px;
    weight: bold;
  }
  padding: 10px;
  margin: auto {
    top: 10px;
    bottom: 15px;
  }
}

%main-box {
  background-color: white;
  padding: 15px;
  border: 1px solid #ccc;
}

.ads {
  @extend %main-box;
  font-size: 20px;
  color: red;
}

.article {
  font-size: 22px;
  @extend %main-box;
  color: green;
}

// Control Flow => If And Else

$theme: "dark";

.page {
  @if $theme == "light" {
    background-color: white;
    color: #444;
  } @else {
    background-color: #444;
    color: white;
  }
}

$rounded: false;

.box {
  @extend %main-box;
  border-radius: if($rounded, 6px, null);
}

$direction: "left";

.arrow-div {
  @extend %main-box;
  font-size: 20px;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 300px;
  height: 300px;
  position: relative;
  margin: 50px auto;
  &::before {
    content: "";
    position: absolute;
    border: 20px solid transparent;
    @if $direction == "top" {
      top: -40px;
      left: 50%;
      transform: translateX(-50%);
      border-bottom-color: red;
    } @else if $direction == "bottom" {
      bottom: -40px;
      left: 50%;
      transform: translateX(-50%);
      border-top-color: red;
    } @else if $direction == "right" {
      right: -40px;
      top: 50%;
      transform: translateY(-50%);
      border-left-color: red;
    } @else if $direction == "left" {
      left: -40px;
      top: 50%;
      transform: translateY(-50%);
      border-right-color: red;
    } @else {
      @error "undefined direction #{$direction}";
    }
  }
}

// Interpolation

$company: "falcon";
$position: "right";

.ad-#{$company}-#{unique-id()} {
  font-size: 20px;
  background-image: url("imgs/#{$company}.png");
  #{$position}: 0;
}
.ad-#{unique-id()} {
  font-weight: bold;
}

// Comments

// This Comment Will Not Show In CSS File

/* This Comment Will Show In CSS File But Not In Compressed Mode */

/*! This Comment Will Show In CSS File And In Compressed Mode */

.box /* Multiple
Lines
Comment */ {
  font-size: 20px; // Inline Comment
}

/* This Comment Contains Interpolation => #{$company} */

/// Function To Do Bla Bla Bla
///
/// @param {num}
/// The Number To Deal With
/// @return {int}

// Mixin And Include

ul.links {
  @include list-reset;
}

.circle-100 {
  @include circle(100px);
  background-color: red;
  color: white;
}

.circle-200 {
  @include circle(200px);
  background-color: red;
  color: white;
}

.center-circle {
  @include circle(400px);
  @include centering;
}

// Loop => For

@for $i from 1 through 10 {
  .class-#{$i} {
    font-size: #{$i + 10px};
  }
}

@for $i from 1 through 10 {
  .circle-#{$i * 100} {
    width: $i * 100px;
    height: $i * 100px;
    border-radius: 50%;
  }
}

// Each And Maps

$themeColors: red, green, blue, black;
@each $color in $themeColors {
  .#{$color}-theme {
    color: $color;
    background-color: #ccc;
    .product {
      border-color: 2px solid $color;
    }
  }
}

$socialMedia: (
  "facebook": blue,
  "github": black,
  "gitlab": orange,
  "youtube": red,
);
@each $website, $color in $socialMedia {
  .#{$website}-website {
    color: $color;
    &::before {
      content: $website;
    }
  }
}

$classes: "First" red 1rem, "Second" green 2rem, "Third" blue 3rem;
@each $order, $color, $magnitude in $classes {
  .#{$order}-class {
    &::before {
      content: $order;
    }
    color: $color;
    width: $magnitude;
    height: $magnitude;
  }
}

// Create Bootstrap-like Grid System
$grid_cols: 12;
@for $i from 1 through $grid_cols {
  .col-#{$i} {
    width: percentage($i/$grid_cols);
  }
}
